import React, { useState, useEffect, useRef } from 'react';
import './Home.css';
import './WebsiteCards.css';
import WebsiteRatingGraph from './WebsiteRatingGraph';
import { FaSearch, FaGlobe, FaShieldAlt, FaFileAlt, FaUserLock, FaAccessibleIcon, FaBalanceScale } from 'react-icons/fa';
import ErrorBoundary from './ErrorBoundary';

// Sample website data
const websiteData = [
  {
    id: 1,
    name: 'Facebook',
    url: 'https://www.facebook.com',
    logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/51/Facebook_f_logo_%282019%29.svg/1200px-Facebook_f_logo_%282019%29.svg.png',
    rating: 'D',
    overallScore: 1.5,
    categories: ['Social Media', 'Advertising'],
    description: 'Facebook\'s Terms of Service are lengthy and complex, with numerous clauses about data collection and usage that may be difficult for the average user to fully understand.',
    criteria: {
      clarity: 2,
      transparency: 1,
      fairness: 1,
      accessibility: 2,
      accountability: 1
    }
  },
  {
    id: 2,
    name: 'Google',
    url: 'https://www.google.com',
    logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/1200px-Google_%22G%22_Logo.svg.png',
    rating: 'C',
    overallScore: 2.2,
    categories: ['Search Engine', 'Advertising'],
    description: 'Google\'s Terms of Service are relatively clear but still contain broad data collection policies that may not be immediately apparent to users.',
    criteria: {
      clarity: 3,
      transparency: 2,
      fairness: 2,
      accessibility: 3,
      accountability: 1
    }
  },
  // Add more websites as needed
  {
    id: 3,
    name: 'Apple',
    url: 'https://www.apple.com',
    logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Apple_logo_black.svg/1200px-Apple_logo_black.svg.png',
    rating: 'B',
    overallScore: 3.4,
    categories: ['Technology', 'Hardware', 'Software'],
    description: 'Apple\'s Terms of Service are better than most, with clearer language and more transparent data practices, though they still contain some complex legal terminology.',
    criteria: {
      clarity: 4,
      transparency: 3,
      fairness: 3,
      accessibility: 4,
      accountability: 3
    }
  },
  {
    id: 4,
    name: 'Amazon',
    url: 'https://www.amazon.com',
    logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Amazon_logo.svg/1200px-Amazon_logo.svg.png',
    rating: 'C',
    overallScore: 2.4,
    categories: ['E-commerce', 'Cloud Services'],
    description: 'Amazon\'s Terms of Service are quite lengthy and contain numerous clauses about data usage and third-party sharing that may be concerning to privacy-conscious users.',
    criteria: {
      clarity: 2,
      transparency: 2,
      fairness: 3,
      accessibility: 3,
      accountability: 2
    }
  },
  {
    id: 5,
    name: 'Twitter',
    url: 'https://twitter.com',
    logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Logo_of_Twitter.svg/1200px-Logo_of_Twitter.svg.png',
    rating: 'C',
    overallScore: 2.6,
    categories: ['Social Media', 'News'],
    description: 'Twitter\'s Terms of Service have improved over time, but still contain broad rights to user content and data collection practices.',
    criteria: {
      clarity: 3,
      transparency: 3,
      fairness: 2,
      accessibility: 3,
      accountability: 2
    }
  },
  {
    id: 6,
    name: 'Microsoft',
    url: 'https://www.microsoft.com',
    logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Microsoft_logo.svg/1200px-Microsoft_logo.svg.png',
    rating: 'B',
    overallScore: 3.2,
    categories: ['Software', 'Cloud Services'],
    description: 'Microsoft has made efforts to simplify their Terms of Service and provide clearer explanations of data practices, though some policies remain complex.',
    criteria: {
      clarity: 3,
      transparency: 3,
      fairness: 3,
      accessibility: 4,
      accountability: 3
    }
  },
  {
    id: 7,
    name: 'Netflix',
    url: 'https://www.netflix.com',
    logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1200px-Netflix_2015_logo.svg.png',
    rating: 'B',
    overallScore: 3.0,
    categories: ['Streaming', 'Entertainment'],
    description: 'Netflix has relatively straightforward Terms of Service compared to many tech companies, with clearer language about subscription terms and content usage.',
    criteria: {
      clarity: 4,
      transparency: 3,
      fairness: 3,
      accessibility: 3,
      accountability: 2
    }
  },
  {
    id: 8,
    name: 'Instagram',
    url: 'https://www.instagram.com',
    logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Instagram_logo_2016.svg/1200px-Instagram_logo_2016.svg.png',
    rating: 'D',
    overallScore: 1.8,
    categories: ['Social Media', 'Photo Sharing'],
    description: 'As a Facebook-owned company, Instagram\'s Terms of Service share many of the same issues with broad data collection and content licensing terms.',
    criteria: {
      clarity: 2,
      transparency: 1,
      fairness: 2,
      accessibility: 2,
      accountability: 2
    }
  },
  {
    id: 9,
    name: 'Spotify',
    url: 'https://www.spotify.com',
    logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/19/Spotify_logo_without_text.svg/1200px-Spotify_logo_without_text.svg.png',
    rating: 'C',
    overallScore: 2.8,
    categories: ['Music Streaming', 'Entertainment'],
    description: 'Spotify\'s Terms of Service are average in terms of clarity and fairness, with some complex sections regarding user content and data collection.',
    criteria: {
      clarity: 3,
      transparency: 3,
      fairness: 3,
      accessibility: 3,
      accountability: 2
    }
  },
  {
    id: 10,
    name: 'TikTok',
    url: 'https://www.tiktok.com',
    logo: 'https://upload.wikimedia.org/wikipedia/en/thumb/a/a9/TikTok_logo.svg/1200px-TikTok_logo.svg.png',
    rating: 'F',
    overallScore: 1.0,
    categories: ['Social Media', 'Video Sharing'],
    description: 'TikTok\'s Terms of Service have raised significant concerns regarding data collection, sharing practices, and broad content licenses.',
    criteria: {
      clarity: 1,
      transparency: 1,
      fairness: 1,
      accessibility: 1,
      accountability: 1
    }
  },
  {
    id: 11,
    name: 'LinkedIn',
    url: 'https://www.linkedin.com',
    logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/LinkedIn_logo_initials.png/1200px-LinkedIn_logo_initials.png',
    rating: 'C',
    overallScore: 2.6,
    categories: ['Professional Networking', 'Social Media'],
    description: 'LinkedIn\'s Terms of Service contain extensive data collection and sharing provisions, though they are somewhat clearer than some other social networks.',
    criteria: {
      clarity: 3,
      transparency: 2,
      fairness: 3,
      accessibility: 3,
      accountability: 2
    }
  },
  {
    id: 12,
    name: 'Reddit',
    url: 'https://www.reddit.com',
    logo: 'https://upload.wikimedia.org/wikipedia/en/thumb/5/58/Reddit_logo_new.svg/1200px-Reddit_logo_new.svg.png',
    rating: 'C',
    overallScore: 2.4,
    categories: ['Social Media', 'Forum'],
    description: 'Reddit\'s Terms of Service are relatively straightforward but still grant the platform broad rights to user content and data.',
    criteria: {
      clarity: 3,
      transparency: 2,
      fairness: 2,
      accessibility: 3,
      accountability: 2
    }
  }
];

function Home() {
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredWebsites, setFilteredWebsites] = useState(websiteData);
  const [selectedWebsite, setSelectedWebsite] = useState(null);
  const [animateIn, setAnimateIn] = useState(false);
  
  const websiteCardsRef = useRef([]);
  const criteriaItemsRef = useRef([]);
  
  // Animation on mount
  useEffect(() => {
    setAnimateIn(true);
    
    // Apply animation delays to website cards
    websiteCardsRef.current.forEach((card, index) => {
      if (card) {
        card.style.setProperty('--animation-delay', index);
      }
    });
    
    // Apply animation delays to criteria items
    criteriaItemsRef.current.forEach((item, index) => {
      if (item) {
        item.style.setProperty('--animation-delay', index);
      }
    });
    
    // Set width for progress bars based on criteria values
    if (selectedWebsite && selectedWebsite.criteria) {
      Object.entries(selectedWebsite.criteria).forEach(([key, value], index) => {
        const item = criteriaItemsRef.current[index];
        if (item) {
          const progressBar = item.querySelector('.criteria-progress-bar');
          if (progressBar) {
            progressBar.style.setProperty('--width', `${(value / 5) * 100}%`);
          }
        }
      });
    }
  }, [selectedWebsite]);

  // Handle search
  const handleSearch = () => {
    if (searchTerm.trim() === '') {
      setFilteredWebsites(websiteData);
      return;
    }
    
    const filtered = websiteData.filter(website => 
      website.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (website.url && website.url.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (website.categories && website.categories.some(category => 
        category.toLowerCase().includes(searchTerm.toLowerCase())
      ))
    );
    
    setFilteredWebsites(filtered);
  };

  // Handle key press for search
  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  // Handle website selection
  const handleWebsiteSelect = (website) => {
    setSelectedWebsite(website);
    
    // Scroll to selected website details
    setTimeout(() => {
      const selectedWebsiteElement = document.querySelector('.selected-website');
      if (selectedWebsiteElement) {
        selectedWebsiteElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    }, 100);
  };

  // Get logo URL with fallback
  const getLogoUrl = (website) => {
    return website.logo || `https://via.placeholder.com/150/2D789E/FFFFFF?text=${website.name ? website.name.charAt(0).toUpperCase() : 'W'}`;
  };

  // Get grade letter based on score
  const getGradeLetter = (score) => {
    if (score >= 4.5) return 'A+';
    if (score >= 4.0) return 'A';
    if (score >= 3.5) return 'A-';
    if (score >= 3.0) return 'B+';
    if (score >= 2.5) return 'B';
    if (score >= 2.0) return 'B-';
    if (score >= 1.5) return 'C+';
    if (score >= 1.0) return 'C';
    if (score >= 0.5) return 'D';
    return 'F';
  };

  // Get CSS class for grade
  const getGradeClass = (score) => {
    if (score >= 3.5) return 'grade-a';
    if (score >= 2.5) return 'grade-b';
    if (score >= 1.5) return 'grade-c';
    if (score >= 0.5) return 'grade-d';
    return 'grade-f';
  };

  // Get icon for criteria
  const getCriteriaIcon = (criteriaKey) => {
    switch (criteriaKey.toLowerCase()) {
      case 'clarity':
        return <FaFileAlt className="criteria-icon" />;
      case 'transparency':
        return <FaGlobe className="criteria-icon" />;
      case 'fairness':
        return <FaBalanceScale className="criteria-icon" />;
      case 'accessibility':
        return <FaAccessibleIcon className="criteria-icon" />;
      case 'accountability':
        return <FaUserLock className="criteria-icon" />;
      default:
        return <FaShieldAlt className="criteria-icon" />;
    }
  };

  // Get description for criteria based on score
  const getCriteriaDescription = (criteriaKey, score) => {
    const descriptions = {
      clarity: [
        "Extremely confusing and filled with legal jargon.",
        "Difficult to understand with many complex terms.",
        "Moderately clear but still contains some complex language.",
        "Generally clear and understandable for most users.",
        "Very clear and written in plain, accessible language."
      ],
      transparency: [
        "Hides important information about data collection and usage.",
        "Vague about how user data is collected and used.",
        "Provides basic information about data practices.",
        "Clearly explains most data collection and usage practices.",
        "Fully transparent about all data collection and usage."
      ],
      fairness: [
        "Contains many one-sided or exploitative terms.",
        "Includes several terms that favor the company over users.",
        "Has a mix of balanced and company-favoring terms.",
        "Generally fair with few concerning clauses.",
        "Balanced and fair to both users and the company."
      ],
      accessibility: [
        "Very difficult to find and read the terms.",
        "Terms are available but not easily accessible.",
        "Terms can be found with some effort.",
        "Terms are easy to find and review.",
        "Terms are prominently displayed and easy to navigate."
      ],
      accountability: [
        "No clear process for addressing issues or concerns.",
        "Limited accountability for company actions.",
        "Basic mechanisms for addressing user concerns.",
        "Clear processes for addressing issues and company accountability.",
        "Strong accountability measures and user recourse options."
      ]
    };
    
    const index = Math.min(Math.max(Math.floor(score) - 1, 0), 4);
    return descriptions[criteriaKey.toLowerCase()][index] || "No description available.";
  };

  return (
    <ErrorBoundary>
      <div className="home-container">
        {/* Hero Section with Integrated Search */}
        <div className="hero-section">
          <h1 className="hero-title">Know Your <span className="highlight">Terms</span></h1>
          <p className="hero-subtitle">
            Understand what you're agreeing to when you click "I Accept" on Terms of Service agreements
          </p>
          
          {/* Prominent Search Bar */}
          <div className="hero-search">
            <div className="search-container">
              <input
                type="text"
                className="search-input"
                placeholder="Search for a website or app..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                onKeyPress={handleKeyPress}
              />
              <button className="search-button" onClick={handleSearch}>
                <FaSearch className="search-icon" />
                Search
              </button>
            </div>
          </div>
          
          <div className="hero-cta">
            <button 
              className="btn btn-accent"
              onClick={() => {
                const ratingSection = document.getElementById('rating-graph-section');
                if (ratingSection) {
                  ratingSection.scrollIntoView({ behavior: 'smooth' });
                }
              }}
            >
              Explore Ratings
            </button>
          </div>
        </div>

        {/* Rating Graph Section */}
        <div id="rating-graph-section" className="rating-graph-section">
          <h2 className="section-title">Website Terms of Service Ratings</h2>
          <p className="section-description">
            Explore how popular websites rate on their Terms of Service agreements. 
            Click on any point to learn more about that website's rating.
          </p>
          <ErrorBoundary>
            <WebsiteRatingGraph 
              data={websiteData} 
              selectedWebsite={selectedWebsite} 
              onWebsiteSelect={handleWebsiteSelect} 
            />
          </ErrorBoundary>
        </div>

        {/* Popular Websites Section with Better Image Handling */}
        <div className="popular-websites-section">
          <h2 className="section-title">Popular Websites</h2>
          <p className="section-description">
            Click on any website to see detailed ratings and analysis of their Terms of Service.
          </p>
          
          <div className="websites-grid">
            {filteredWebsites && filteredWebsites.length > 0 ? (
              filteredWebsites.slice(0, 12).map((website, index) => (
                <div
                  key={website.id || index}
                  className="website-card"
                  onClick={() => handleWebsiteSelect(website)}
                  ref={el => websiteCardsRef.current[index] = el}
                  style={{ '--animation-delay': index }}
                >
                  <div className="website-card-content">
                    <div className="website-logo-container">
                      <img
                        src={getLogoUrl(website)}
                        alt={`${website.name || 'Website'} logo`}
                        className="website-logo"
                        width="80"
                        height="80"
                        loading="lazy"
                        onError={(e) => {
                          e.target.onerror = null;
                          e.target.src = `https://via.placeholder.com/150/2D789E/FFFFFF?text=${website.name ? website.name.charAt(0).toUpperCase() : 'W'}`;
                        }}
                      />
                    </div>
                    <div className="website-card-info">
                      <h3 className="website-name">{website.name || 'Unknown Website'}</h3>
                      <span className={`rating-badge ${getGradeClass(website.overallScore || 0)}`}>
                        {website.rating || getGradeLetter(website.overallScore || 0)}
                      </span>
                    </div>
                  </div>
                  <div className="website-card-overlay">
                    <span>View Details</span>
                  </div>
                </div>
              ))
            ) : (
              <div className="no-results">
                <p>No websites found matching your search criteria.</p>
              </div>
            )}
          </div>
          
          {filteredWebsites && filteredWebsites.length > 12 && (
            <div className="view-more-container">
              <button 
                className="btn btn-secondary"
                onClick={() => {
                  // Show all websites
                  setFilteredWebsites(websiteData);
                }}
              >
                View More Websites
              </button>
            </div>
          )}
        </div>

        {/* Selected Website Information */}
        {selectedWebsite && (
          <div className="selected-website">
            <div className="selected-website-header">
              <div className="selected-website-logo-container">
                <img
                  src={getLogoUrl(selectedWebsite)}
                  alt={`${selectedWebsite.name || 'Website'} logo`}
                  className="selected-website-logo"
                  width="100"
                  height="100"
                  loading="lazy"
                  onError={(e) => {
                    e.target.onerror = null;
                    e.target.src = `https://via.placeholder.com/150/2D789E/FFFFFF?text=${selectedWebsite.name ? selectedWebsite.name.charAt(0).toUpperCase() : 'W'}`;
                  }}
                />
              </div>
              <div className="selected-website-info">
                <h2 className="selected-website-name">{selectedWebsite.name || 'Unknown Website'}</h2>
                {selectedWebsite.url && (
                  <a href={selectedWebsite.url} className="selected-website-url" target="_blank" rel="noopener noreferrer">
                    <FaGlobe /> {selectedWebsite.url}
                  </a>
                )}
                <div className="website-tags">
                  {selectedWebsite.categories && Array.isArray(selectedWebsite.categories) 
                    ? selectedWebsite.categories.map((category, idx) => (
                        <span key={idx} className="website-tag" style={{ '--animation-delay': idx }}>
                          {category}
                        </span>
                      ))
                    : <span className="website-tag">General</span>
                  }
                </div>
              </div>
            </div>

            <p className="selected-website-description">
              {selectedWebsite.description || 'No description available for this website.'}
            </p>

            {selectedWebsite.criteria && (
              <div className="criteria-grid">
                {Object.entries(selectedWebsite.criteria).map(([key, value], index) => (
                  <div 
                    key={key} 
                    className="criteria-item"
                    ref={el => criteriaItemsRef.current[index] = el}
                    style={{ '--animation-delay': index }}
                  >
                    <h3 className="criteria-title">
                      {getCriteriaIcon(key)}
                      {key.charAt(0).toUpperCase() + key.slice(1)}
                    </h3>
                    <div className="criteria-rating">
                      <span className="criteria-value">{value}</span>
                      <span className="criteria-max">/5</span>
                    </div>
                    <div className="criteria-progress">
                      <div 
                        className="criteria-progress-bar" 
                        style={{ width: `${(value / 5) * 100}%` }}
                      ></div>
                    </div>
                    <p className="criteria-description">
                      {getCriteriaDescription(key, value)}
                    </p>
                  </div>
                ))}
              </div>
            )}
            
            <div className="action-buttons">
              <a href="#/quiz" className="btn btn-primary">
                Take the Quiz
              </a>
              <a href="#/whatnow" className="btn btn-secondary">
                Learn More
              </a>
            </div>
          </div>
        )}
        
        {/* Call to Action Section */}
        <div className="cta-section">
          <h2 className="cta-title">Take Control of Your Digital Footprint</h2>
          <p className="cta-description">
            Learn more about how to protect your privacy and understand the terms you're agreeing to online.
          </p>
          <div className="cta-buttons">
            <a href="#/quiz" className="btn btn-accent">
              Take the Quiz
            </a>
            <a href="#/about" className="btn btn-secondary">
              About the Project
            </a>
          </div>
        </div>
      </div>
    </ErrorBoundary>
  );
}

export default Home;
